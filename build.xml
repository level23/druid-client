<?xml version="1.0" encoding="UTF-8"?>
<project name="level23/druid-client" default="full-build">

    <!-- Use this when the tools are managed by Composer in ${basedir}/vendor/bin -->
    <property name="pdepend"  value="${basedir}/vendor/bin/pdepend"/>
    <property name="phpcpd"   value="${basedir}/vendor/bin/phpcpd"/>
    <property name="phpcbf"   value="${basedir}/vendor/bin/phpcbf"/>
    <property name="phpcs"    value="${basedir}/vendor/bin/phpcs"/>
    <property name="phpmd"    value="${basedir}/vendor/bin/phpmd"/>
    <property name="composer" value="composer"/> <!-- composer should be installed global -->
    <property name="phpunit"  value="${basedir}/vendor/bin/phpunit"/>
    <property name="phpstan"  value="${basedir}/vendor/bin/phpstan"/>

    <target name="full-build"
            depends="prepare,composer,static-analysis,phpunit,-check-failure"
            description="Performs static analysis, runs the tests, and generates project documentation"/>

    <target name="precommit"
            depends="prepare,composer,phpunit,phpcbf,phpcs,phpcpd,phpmd"
            description="Performs precommit checks"/>

    <target name="full-build-parallel"
            depends="prepare,composer,static-analysis-parallel,phpunit,-check-failure"
            description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

    <target name="gitlab"
            depends="prepare,lint,phpstan,phpunit-gitlab,-check-failure"
            description="Build specific for Gitlab CI" />

    <target name="static-analysis"
            depends="lint,composer,pdepend,phpstan,phpmd-ci,phpcs-ci,phpcpd-ci"
            description="Performs static analysis" />

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel"
            description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <antcall target="composer"/>
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="lint"/>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phpstan"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>

        <property name="lint.done" value="true"/>
    </target>

    <target name="composer" description="Installing composer dependencies">
        <exec executable="${composer}" failonerror="true">
            <arg value="install" />
            <arg value="--dev" />
            <arg value="--prefer-dist" />
            <arg value="--no-progress" />
        </exec>
    </target>

    <target name="phpstan" description="Run phpstan">
        <exec executable="${phpstan}" failonerror="true">
            <arg value="analyse" />
            <arg value="--no-progress" />
            <arg value="--no-ansi" />
            <arg value="--no-interaction" />
            <arg value="--memory-limit" />
            <arg value="512m" />
        </exec>
    </target>

    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd"
            unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg path="${basedir}/build/phpmd.xml" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg path="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs"
            unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>

        <echo>PHP CodeSniffer finished. Use "ant phpcbf" to fix violations automatically</echo>
        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcbf"
            description="Fix coding standard violations using PHP Code Beautifier and Fixer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcbf}" taskname="phpcbf">
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phpcs-ci"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd"
            unless="phpcpd.done"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci"
            unless="phpcpd.done"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpunit"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit-gitlab"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit (for gitlab ci)">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg line="--configuration=${basedir}/build/phpunit.xml --colors=never --coverage-text"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="open-browser">
        <exec executable="open">
            <arg value="${basedir}/build/coverage/index.html"/>
        </exec>
    </target>

    <target name="phpunit-no-coverage"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
            <arg value="--no-coverage"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>
</project>